import { AuthClient } from "./modules/auth-client";
import { TenantClient } from "./modules/tenant-client";
import { PartyClient } from "./modules/party-client";
import { LocationAssetClient } from "./modules/location-asset-client";
import { ManufacturingClient } from "./modules/manufacturing-client";
import { SalesClient } from "./modules/sales-client";
import { EmployeeClient } from "./modules/employee-client";
import { InventoryClient } from "./modules/inventory-client";
import { PurchaseClient } from "./modules/purchase-client";
import type { Attribute, AttributeQuery, BomQuery, BomComponentQuery, EcoQuery, CreateAttributeRequest, CreateOrganizationRequest, CreatePartyRequest, CreatePersonRequest, CreateTenantRequest, Employee, LogoutRequest, PaginatedResponse, Pagination, PartyRole, RefreshTokenRequest, RequestOTPRequest, ResendOTPRequest, Response, TenantQuery, UpdateAttributeRequest, UpdatePartyRequest, UpdateTenantRequest, VerifyOTPRequest } from "@prodobit/types";
import type { CreateItemRequest, ItemBase, LotBase, ProdobitClientConfig, RequestConfig, StockBase, TokenInfo, ItemFilters, LocationFilters, AssetFilters, PartyFilters, LotFilters, StockFilters, CreateLocationRequest, UpdateLocationRequest, CreateAssetRequest, UpdateAssetRequest, CreateStockRequest, UpdateStockRequest, CreateLotRequest, UpdateLotRequest, CreateEmployeeRequest, UpdateEmployeeRequest, CreateLocationTypeRequest, CreateAssetTypeRequest, CreateItemCategoryRequest, CreateInvitationRequest, UpdateMembershipRequest, ContactInfo, AddressInfo, ItemType, PartyType, RoleType } from "./types";
export declare class ProdobitClient {
    private auth;
    private tenant;
    private party;
    private locationAsset;
    private manufacturing;
    private sales;
    private employee;
    private inventory;
    private purchase;
    constructor(config: ProdobitClientConfig);
    makeRequest<T = unknown>(method: string, path: string, data?: unknown, config?: RequestConfig): Promise<T>;
    get baseUrl(): string;
    requestOTP(data: RequestOTPRequest, config?: RequestConfig): Promise<{
        success: boolean;
        message: string;
        expiresAt?: string | undefined;
        requiresTenantSelection?: boolean | undefined;
        isNewUser?: boolean | undefined;
        defaultTenantId?: string | undefined;
        defaultTenantName?: string | undefined;
        selectedTenantId?: string | undefined;
        selectedTenantName?: string | undefined;
        tenants?: {
            id: string;
            name: string;
            role: string;
        }[] | undefined;
    }>;
    resendOTP(data: ResendOTPRequest, config?: RequestConfig): Promise<{
        success: boolean;
        message: string;
        expiresAt?: string | undefined;
        requiresTenantSelection?: boolean | undefined;
        isNewUser?: boolean | undefined;
        defaultTenantId?: string | undefined;
        defaultTenantName?: string | undefined;
        selectedTenantId?: string | undefined;
        selectedTenantName?: string | undefined;
        tenants?: {
            id: string;
            name: string;
            role: string;
        }[] | undefined;
    }>;
    verifyOTP(data: VerifyOTPRequest, config?: RequestConfig): Promise<{
        success: boolean;
        data: {
            user: {
                id: string;
                twoFactorEnabled: boolean;
                status: "active" | "inactive" | "suspended" | "deleted";
                insertedAt: string;
                updatedAt: string;
                displayName?: string | undefined;
                twoFactorSecret?: string | undefined;
                deletedAt?: string | undefined;
            };
            session: {
                accessToken: string;
                expiresAt: string;
                refreshToken?: string | undefined;
            };
            isNewUser: boolean;
            tenantMemberships?: {
                id: string;
                userId: string;
                tenantId: string;
                role: "external" | "admin" | "manager" | "user" | "viewer";
                status: "active" | "inactive" | "suspended" | "invited";
                permissions: object;
                accessLevel: "full" | "limited" | "read_only";
                resourceRestrictions: object;
                insertedAt: string;
                updatedAt: string;
                ipRestrictions?: object | undefined;
                timeRestrictions?: object | undefined;
                expiresAt?: string | undefined;
                invitedBy?: string | undefined;
                invitedAt?: string | undefined;
                joinedAt?: string | undefined;
                lastLoginAt?: string | undefined;
                deletedAt?: string | undefined;
            }[] | undefined;
        };
        message?: string | undefined;
    }>;
    refreshToken(data?: RefreshTokenRequest, config?: RequestConfig): Promise<{
        success: boolean;
        data: {
            user: {
                id: string;
                twoFactorEnabled: boolean;
                status: "active" | "inactive" | "suspended" | "deleted";
                insertedAt: string;
                updatedAt: string;
                displayName?: string | undefined;
                twoFactorSecret?: string | undefined;
                deletedAt?: string | undefined;
            };
            session: {
                accessToken: string;
                expiresAt: string;
                refreshToken?: string | undefined;
            };
            isNewUser: boolean;
            tenantMemberships?: {
                id: string;
                userId: string;
                tenantId: string;
                role: "external" | "admin" | "manager" | "user" | "viewer";
                status: "active" | "inactive" | "suspended" | "invited";
                permissions: object;
                accessLevel: "full" | "limited" | "read_only";
                resourceRestrictions: object;
                insertedAt: string;
                updatedAt: string;
                ipRestrictions?: object | undefined;
                timeRestrictions?: object | undefined;
                expiresAt?: string | undefined;
                invitedBy?: string | undefined;
                invitedAt?: string | undefined;
                joinedAt?: string | undefined;
                lastLoginAt?: string | undefined;
                deletedAt?: string | undefined;
            }[] | undefined;
        };
        message?: string | undefined;
    }>;
    logout(data?: LogoutRequest, config?: RequestConfig): Promise<Response<void>>;
    getCurrentUser(config?: RequestConfig): Promise<Response<{
        id: string;
        twoFactorEnabled: boolean;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        displayName?: string | undefined;
        twoFactorSecret?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getMe(config?: RequestConfig): Promise<Response<{
        id: string;
        twoFactorEnabled: boolean;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        displayName?: string | undefined;
        twoFactorSecret?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    loginWithOTP(email: string, tenantId?: string): Promise<{
        success: boolean;
        message: string;
        expiresAt?: string;
        requiresTenantSelection?: boolean;
        isNewUser?: boolean;
        defaultTenantId?: string;
        defaultTenantName?: string;
        selectedTenantId?: string;
        selectedTenantName?: string;
        tenants?: Array<{
            id: string;
            name: string;
            role: string;
        }>;
    }>;
    completeLogin(email: string, code: string, tenantId?: string): Promise<{
        success: boolean;
        user?: any;
        isNewUser?: boolean;
        error?: string;
    }>;
    signOut(allDevices?: boolean): Promise<boolean>;
    getTenants(query?: TenantQuery & Pagination, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        name: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        subscriptionPlan: "basic" | "pro" | "enterprise";
        settings: object;
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }[]>>;
    getTenant(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        name: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        subscriptionPlan: "basic" | "pro" | "enterprise";
        settings: object;
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }>>;
    createTenant(data: CreateTenantRequest, config?: RequestConfig): Promise<Response<{
        id: string;
        name: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        subscriptionPlan: "basic" | "pro" | "enterprise";
        settings: object;
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }>>;
    updateTenant(id: string, data: UpdateTenantRequest, config?: RequestConfig): Promise<Response<{
        id: string;
        name: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        subscriptionPlan: "basic" | "pro" | "enterprise";
        settings: object;
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }>>;
    deleteTenant(id: string, config?: RequestConfig): Promise<Response<void>>;
    getTenantMembers(tenantId: string, config?: RequestConfig): Promise<Response<{
        id: string;
        userId: string;
        tenantId: string;
        role: "external" | "admin" | "manager" | "user" | "viewer";
        status: "active" | "inactive" | "suspended" | "invited";
        permissions: object;
        accessLevel: "full" | "limited" | "read_only";
        resourceRestrictions: object;
        insertedAt: string;
        updatedAt: string;
        ipRestrictions?: object | undefined;
        timeRestrictions?: object | undefined;
        expiresAt?: string | undefined;
        invitedBy?: string | undefined;
        invitedAt?: string | undefined;
        joinedAt?: string | undefined;
        lastLoginAt?: string | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getTenantRoles(tenantId: string, config?: RequestConfig): Promise<Response<{
        id: string;
        name: string;
        description?: string;
    }[]>>;
    getTenantInvitations(tenantId: string, config?: RequestConfig): Promise<Response<{
        id: string;
        email: string;
        status: string;
        expiresAt: string;
    }[]>>;
    createInvitation(tenantId: string, data: CreateInvitationRequest, config?: RequestConfig): Promise<Response<unknown>>;
    getInvitationByToken(token: string, config?: RequestConfig): Promise<Response<unknown>>;
    acceptInvitation(token: string, config?: RequestConfig): Promise<Response<unknown>>;
    updateMembership(tenantId: string, membershipId: string, data: UpdateMembershipRequest, config?: RequestConfig): Promise<Response<unknown>>;
    removeMember(tenantId: string, membershipId: string, config?: RequestConfig): Promise<Response<unknown>>;
    createPerson(data: CreatePersonRequest, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        person: import("@prodobit/types").Person;
        roles: PartyRole[];
    }>>;
    createOrganization(data: CreateOrganizationRequest, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        organization: import("@prodobit/types").Organization;
        roles: PartyRole[];
    }>>;
    getParties(query?: PartyFilters & Pagination, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        partyType: "person" | "organization";
        code: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }[]>>;
    getParty(id: string, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        specificData: import("@prodobit/types").Person | import("@prodobit/types").Organization;
        roles: PartyRole[];
        addresses: import("@prodobit/types").Address[];
        contacts: import("@prodobit/types").ContactMechanism[];
    }>>;
    updateParty(id: string, data: UpdatePartyRequest, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        specificData: import("@prodobit/types").Person | import("@prodobit/types").Organization;
        roles: PartyRole[];
        addresses: import("@prodobit/types").Address[];
        contacts: import("@prodobit/types").ContactMechanism[];
    }>>;
    deleteParty(id: string, config?: RequestConfig): Promise<Response<void>>;
    getCustomers(config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        partyType: "person" | "organization";
        code: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }[]>>;
    getSuppliers(config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        partyType: "person" | "organization";
        code: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }[]>>;
    getEmployeeParties(config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        partyType: "person" | "organization";
        code: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }[]>>;
    createParty(data: CreatePartyRequest, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        partyType: "person" | "organization";
        code: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }>>;
    createPersonCustomer(firstName: string, lastName: string, email?: string, phone?: string, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        person: import("@prodobit/types").Person;
        roles: PartyRole[];
    }>>;
    createPersonSupplier(firstName: string, lastName: string, email?: string, phone?: string, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        person: import("@prodobit/types").Person;
        roles: PartyRole[];
    }>>;
    createOrganizationCustomer(name: string, email?: string, phone?: string, address?: string, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        organization: import("@prodobit/types").Organization;
        roles: PartyRole[];
    }>>;
    createOrganizationSupplier(name: string, email?: string, phone?: string, address?: string, config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        organization: import("@prodobit/types").Organization;
        roles: PartyRole[];
    }>>;
    createPersonWithRoles(firstName: string, lastName: string, roles: RoleType[], contacts?: ContactInfo[], addresses?: AddressInfo[], config?: RequestConfig): Promise<Response<{
        party: import("@prodobit/types").Party;
        person: import("@prodobit/types").Person;
        roles: PartyRole[];
    }>>;
    searchParties(searchTerm: string, partyType?: PartyType, roleType?: RoleType, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        partyType: "person" | "organization";
        code: string;
        status: "active" | "inactive" | "suspended" | "deleted";
        insertedAt: string;
        updatedAt: string;
        deletedAt?: string | undefined;
    }[]>>;
    getLocations(filters?: LocationFilters, config?: RequestConfig): Promise<Response<any[]>>;
    getLocation(locationId: string, config?: RequestConfig): Promise<Response<any>>;
    getLocationById(locationId: string, config?: RequestConfig): Promise<Response<any>>;
    getChildLocations(parentLocationId: string, config?: RequestConfig): Promise<Response<any[]>>;
    getLocationHierarchy(locationId: string, config?: RequestConfig): Promise<Response<any[]>>;
    createLocation(data: CreateLocationRequest, config?: RequestConfig): Promise<Response<unknown>>;
    updateLocation(locationId: string, data: UpdateLocationRequest, config?: RequestConfig): Promise<Response<unknown>>;
    deleteLocation(locationId: string, config?: RequestConfig): Promise<Response<void>>;
    getLocationStats(config?: RequestConfig): Promise<Response<{
        totalLocations: number;
        locationsByType: Record<string, number>;
        locationsByStatus: Record<string, number>;
    }>>;
    getLocationTypes(category?: string, config?: RequestConfig): Promise<Response<{
        id: string;
        name: string;
        code?: string;
        category?: string;
        isActive: boolean;
    }[]>>;
    createLocationType(data: CreateLocationTypeRequest, config?: RequestConfig): Promise<Response<unknown>>;
    getAssets(filters?: AssetFilters, config?: RequestConfig): Promise<Response<any[]>>;
    searchAssets(searchTerm: string, filters?: Record<string, unknown>, config?: RequestConfig): Promise<Response<any[]>>;
    getAsset(assetId: string, config?: RequestConfig): Promise<Response<any>>;
    getAssetById(assetId: string, config?: RequestConfig): Promise<Response<any>>;
    getChildAssets(parentAssetId: string, config?: RequestConfig): Promise<Response<any[]>>;
    getAssetHierarchy(assetId: string, config?: RequestConfig): Promise<Response<any[]>>;
    getAssetsByLocation(locationId: string, config?: RequestConfig): Promise<Response<any[]>>;
    createAsset(data: CreateAssetRequest, config?: RequestConfig): Promise<Response<unknown>>;
    updateAsset(assetId: string, data: UpdateAssetRequest, config?: RequestConfig): Promise<Response<unknown>>;
    moveAsset(assetId: string, locationId: string, config?: RequestConfig): Promise<Response<unknown>>;
    deleteAsset(assetId: string, config?: RequestConfig): Promise<Response<void>>;
    getAssetStats(config?: RequestConfig): Promise<Response<{
        totalAssets: number;
        assetsByType: Record<string, number>;
        assetsByStatus: Record<string, number>;
        assetsByLocation: Record<string, number>;
    }>>;
    getAssetTypes(category?: string, config?: RequestConfig): Promise<Response<{
        id: string;
        name: string;
        code?: string;
        category?: string;
        isActive: boolean;
    }[]>>;
    createAssetType(data: CreateAssetTypeRequest, config?: RequestConfig): Promise<Response<unknown>>;
    createLocationQuick(name: string, locationType?: string, parentLocationId?: string, config?: RequestConfig): Promise<Response<unknown>>;
    createAssetQuick(name: string, locationId: string, assetType?: string, config?: RequestConfig): Promise<Response<unknown>>;
    getAttributes(query?: AttributeQuery & Pagination, config?: RequestConfig): Promise<PaginatedResponse<Attribute[]>>;
    getAttribute(id: string, config?: RequestConfig): Promise<Response<Attribute>>;
    createAttribute(data: CreateAttributeRequest, config?: RequestConfig): Promise<Response<Attribute>>;
    updateAttribute(id: string, data: UpdateAttributeRequest, config?: RequestConfig): Promise<Response<Attribute>>;
    deleteAttribute(id: string, config?: RequestConfig): Promise<Response<void>>;
    getFeatures(config?: RequestConfig): Promise<Response<any>>;
    getEmployees(query?: Pagination, config?: RequestConfig): Promise<PaginatedResponse<Employee[]>>;
    getEmployee(id: string, config?: RequestConfig): Promise<Response<unknown>>;
    createEmployee(data: CreateEmployeeRequest, config?: RequestConfig): Promise<Response<unknown>>;
    updateEmployee(id: string, data: UpdateEmployeeRequest, config?: RequestConfig): Promise<Response<unknown>>;
    deleteEmployee(id: string, config?: RequestConfig): Promise<Response<void>>;
    getItems(query?: ItemFilters & Pagination, config?: RequestConfig): Promise<Response<ItemBase[]>>;
    getItem(id: string, config?: RequestConfig): Promise<Response<ItemBase>>;
    createItem(data: CreateItemRequest, config?: RequestConfig): Promise<Response<ItemBase>>;
    createProduct(data: CreateItemRequest, config?: RequestConfig): Promise<Response<ItemBase>>;
    createService(data: CreateItemRequest, config?: RequestConfig): Promise<Response<ItemBase>>;
    createRawMaterial(data: CreateItemRequest, config?: RequestConfig): Promise<Response<unknown>>;
    createComponent(data: CreateItemRequest, config?: RequestConfig): Promise<Response<unknown>>;
    getProducts(config?: RequestConfig): Promise<Response<ItemBase[]>>;
    getServices(config?: RequestConfig): Promise<Response<ItemBase[]>>;
    getRawMaterials(config?: RequestConfig): Promise<Response<ItemBase[]>>;
    getComponents(config?: RequestConfig): Promise<Response<ItemBase[]>>;
    searchItems(searchTerm: string, filters?: {
        itemType?: ItemType;
    }, config?: RequestConfig): Promise<Response<ItemBase[]>>;
    deleteItem(id: string, config?: RequestConfig): Promise<Response<void>>;
    getItemCategories(itemType?: ItemType, config?: RequestConfig): Promise<Response<any[]>>;
    createItemCategory(data: CreateItemCategoryRequest, config?: RequestConfig): Promise<Response<unknown>>;
    getStocks(filters?: StockFilters, config?: RequestConfig): Promise<Response<StockBase[]>>;
    getStock(stockId: string, config?: RequestConfig): Promise<Response<StockBase>>;
    createStock(data: CreateStockRequest, config?: RequestConfig): Promise<Response<unknown>>;
    updateStock(stockId: string, data: UpdateStockRequest, config?: RequestConfig): Promise<Response<unknown>>;
    deleteStock(stockId: string, config?: RequestConfig): Promise<Response<void>>;
    getLots(filters?: LotFilters, config?: RequestConfig): Promise<Response<LotBase[]>>;
    getLot(lotId: string, config?: RequestConfig): Promise<Response<LotBase>>;
    createLot(data: CreateLotRequest, config?: RequestConfig): Promise<Response<unknown>>;
    updateLot(lotId: string, data: UpdateLotRequest, config?: RequestConfig): Promise<Response<unknown>>;
    deleteLot(lotId: string, config?: RequestConfig): Promise<Response<void>>;
    setTokenInfo(tokenInfo: TokenInfo): void;
    getTokenInfo(): TokenInfo | undefined;
    clearTokenInfo(): void;
    getCurrentTenantId(): string | undefined;
    isAuthenticated(): boolean;
    isTokenValid(): boolean;
    getAccessToken(): string | undefined;
    setApiKey(apiKey: string): void;
    removeApiKey(): void;
    get authClient(): AuthClient;
    get tenantClient(): TenantClient;
    get partyClient(): PartyClient;
    get locationAssetClient(): LocationAssetClient;
    get manufacturingClient(): ManufacturingClient;
    get salesClient(): SalesClient;
    get employeeClient(): EmployeeClient;
    callModuleEndpoint<T>(module: string, endpoint: string, method?: "GET" | "POST" | "PUT" | "DELETE", data?: unknown, config?: RequestConfig): Promise<T>;
    get inventoryClient(): InventoryClient;
    get purchaseClient(): PurchaseClient;
    getStockReservations(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        itemId: string;
        lotId: string;
        locationId: string;
        stockId: string;
        reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
        status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
        quantityRequested: number;
        quantityReserved: number;
        quantityConsumed: number;
        insertedAt: string;
        updatedAt: string;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        priority?: number | undefined;
        expiresAt?: string | undefined;
        reservedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getStockReservation(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotId: string;
        locationId: string;
        stockId: string;
        reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
        status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
        quantityRequested: number;
        quantityReserved: number;
        quantityConsumed: number;
        insertedAt: string;
        updatedAt: string;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        priority?: number | undefined;
        expiresAt?: string | undefined;
        reservedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    createStockReservation(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotId: string;
        locationId: string;
        stockId: string;
        reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
        status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
        quantityRequested: number;
        quantityReserved: number;
        quantityConsumed: number;
        insertedAt: string;
        updatedAt: string;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        priority?: number | undefined;
        expiresAt?: string | undefined;
        reservedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateStockReservation(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotId: string;
        locationId: string;
        stockId: string;
        reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
        status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
        quantityRequested: number;
        quantityReserved: number;
        quantityConsumed: number;
        insertedAt: string;
        updatedAt: string;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        priority?: number | undefined;
        expiresAt?: string | undefined;
        reservedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteStockReservation(id: string, config?: RequestConfig): Promise<Response<void>>;
    consumeStockReservation(id: string, data: {
        quantity: number;
        notes?: string;
    }, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotId: string;
        locationId: string;
        stockId: string;
        reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
        status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
        quantityRequested: number;
        quantityReserved: number;
        quantityConsumed: number;
        insertedAt: string;
        updatedAt: string;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        priority?: number | undefined;
        expiresAt?: string | undefined;
        reservedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    releaseStockReservation(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotId: string;
        locationId: string;
        stockId: string;
        reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
        status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
        quantityRequested: number;
        quantityReserved: number;
        quantityConsumed: number;
        insertedAt: string;
        updatedAt: string;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        priority?: number | undefined;
        expiresAt?: string | undefined;
        reservedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getStockMovements(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        itemId: string;
        locationId: string;
        movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        stockId?: string | undefined;
        unitCost?: number | undefined;
        totalCost?: number | undefined;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        batchNumber?: string | undefined;
        expirationDate?: string | undefined;
        serialNumbers?: string[] | undefined;
        fromLocationId?: string | undefined;
        toLocationId?: string | undefined;
        fromLotId?: string | undefined;
        toLotId?: string | undefined;
        userId?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getStockMovement(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        locationId: string;
        movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        stockId?: string | undefined;
        unitCost?: number | undefined;
        totalCost?: number | undefined;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        batchNumber?: string | undefined;
        expirationDate?: string | undefined;
        serialNumbers?: string[] | undefined;
        fromLocationId?: string | undefined;
        toLocationId?: string | undefined;
        fromLotId?: string | undefined;
        toLotId?: string | undefined;
        userId?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    createStockMovement(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        locationId: string;
        movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        stockId?: string | undefined;
        unitCost?: number | undefined;
        totalCost?: number | undefined;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        batchNumber?: string | undefined;
        expirationDate?: string | undefined;
        serialNumbers?: string[] | undefined;
        fromLocationId?: string | undefined;
        toLocationId?: string | undefined;
        fromLotId?: string | undefined;
        toLotId?: string | undefined;
        userId?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getItemStockMovements(itemId: string, filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        itemId: string;
        locationId: string;
        movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        stockId?: string | undefined;
        unitCost?: number | undefined;
        totalCost?: number | undefined;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        batchNumber?: string | undefined;
        expirationDate?: string | undefined;
        serialNumbers?: string[] | undefined;
        fromLocationId?: string | undefined;
        toLocationId?: string | undefined;
        fromLotId?: string | undefined;
        toLotId?: string | undefined;
        userId?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getPhysicalInventories(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getPhysicalInventory(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    createPhysicalInventory(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    updatePhysicalInventory(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    deletePhysicalInventory(id: string, config?: RequestConfig): Promise<Response<void>>;
    startPhysicalInventory(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    completePhysicalInventory(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    cancelPhysicalInventory(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        name: string;
        inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
        status: "in_progress" | "cancelled" | "planned" | "completed";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        locationIds?: string[] | undefined;
        itemIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        plannedStartDate?: string | undefined;
        plannedEndDate?: string | undefined;
        actualStartDate?: string | undefined;
        actualEndDate?: string | undefined;
        countedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        tolerancePercentage?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getPhysicalInventoryItems(physicalInventoryId: string, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        physicalInventoryId: string;
        itemId: string;
        locationId: string;
        systemQuantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        countedQuantity?: number | undefined;
        varianceQuantity?: number | undefined;
        variancePercentage?: number | undefined;
        unitCost?: number | undefined;
        varianceValue?: number | undefined;
        counted?: boolean | undefined;
        countedAt?: string | undefined;
        countedBy?: string | undefined;
        serialNumbers?: string[] | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    updatePhysicalInventoryItem(physicalInventoryId: string, itemId: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        physicalInventoryId: string;
        itemId: string;
        locationId: string;
        systemQuantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        countedQuantity?: number | undefined;
        varianceQuantity?: number | undefined;
        variancePercentage?: number | undefined;
        unitCost?: number | undefined;
        varianceValue?: number | undefined;
        counted?: boolean | undefined;
        countedAt?: string | undefined;
        countedBy?: string | undefined;
        serialNumbers?: string[] | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    generatePhysicalInventoryAdjustments(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        status: "draft" | "cancelled" | "approved";
        insertedAt: string;
        updatedAt: string;
        batchNumber?: string | undefined;
        reason?: string | undefined;
        adjustedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getStockAdjustments(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        status: "draft" | "cancelled" | "approved";
        insertedAt: string;
        updatedAt: string;
        batchNumber?: string | undefined;
        reason?: string | undefined;
        adjustedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getStockAdjustment(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        status: "draft" | "cancelled" | "approved";
        insertedAt: string;
        updatedAt: string;
        batchNumber?: string | undefined;
        reason?: string | undefined;
        adjustedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    createStockAdjustment(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        status: "draft" | "cancelled" | "approved";
        insertedAt: string;
        updatedAt: string;
        batchNumber?: string | undefined;
        reason?: string | undefined;
        adjustedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateStockAdjustment(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        status: "draft" | "cancelled" | "approved";
        insertedAt: string;
        updatedAt: string;
        batchNumber?: string | undefined;
        reason?: string | undefined;
        adjustedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteStockAdjustment(id: string, config?: RequestConfig): Promise<Response<void>>;
    approveStockAdjustment(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        status: "draft" | "cancelled" | "approved";
        insertedAt: string;
        updatedAt: string;
        batchNumber?: string | undefined;
        reason?: string | undefined;
        adjustedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getStockAdjustmentItems(stockAdjustmentId: string, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        stockAdjustmentId: string;
        itemId: string;
        locationId: string;
        currentQuantity: number;
        adjustedQuantity: number;
        varianceQuantity: number;
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        stockId?: string | undefined;
        unitCost?: number | undefined;
        totalCost?: number | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getLotGenealogies(lotId: string, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        childLotId: string;
        parentLotId: string;
        relationship: "split" | "merge" | "transform" | "rework";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        unitOfMeasure?: string | undefined;
        workOrderId?: string | undefined;
        processedAt?: string | undefined;
        processedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    createLotGenealogy(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        childLotId: string;
        parentLotId: string;
        relationship: "split" | "merge" | "transform" | "rework";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        unitOfMeasure?: string | undefined;
        workOrderId?: string | undefined;
        processedAt?: string | undefined;
        processedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getLotChildren(lotId: string, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        childLotId: string;
        parentLotId: string;
        relationship: "split" | "merge" | "transform" | "rework";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        unitOfMeasure?: string | undefined;
        workOrderId?: string | undefined;
        processedAt?: string | undefined;
        processedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getLotParents(lotId: string, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        childLotId: string;
        parentLotId: string;
        relationship: "split" | "merge" | "transform" | "rework";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        unitOfMeasure?: string | undefined;
        workOrderId?: string | undefined;
        processedAt?: string | undefined;
        processedBy?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getLotTrackingHistory(lotId: string, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        itemId: string;
        locationId: string;
        movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        quantity: number;
        insertedAt: string;
        updatedAt: string;
        lotId?: string | undefined;
        stockId?: string | undefined;
        unitCost?: number | undefined;
        totalCost?: number | undefined;
        referenceId?: string | undefined;
        referenceType?: string | undefined;
        batchNumber?: string | undefined;
        expirationDate?: string | undefined;
        serialNumbers?: string[] | undefined;
        fromLocationId?: string | undefined;
        toLocationId?: string | undefined;
        fromLotId?: string | undefined;
        toLotId?: string | undefined;
        userId?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateLotTracking(lotId: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotNumber: string;
        status: "active" | "expired" | "consumed" | "quarantined" | "scrapped";
        trackingMode: "none" | "lot_only" | "serial_only" | "lot_and_serial";
        insertedAt: string;
        updatedAt: string;
        manufacturingDate?: string | undefined;
        expirationDate?: string | undefined;
        batchNumber?: string | undefined;
        supplierLotNumber?: string | undefined;
        supplierId?: string | undefined;
        certificateNumbers?: string[] | undefined;
        qualityStatus?: "pending" | "quarantined" | "passed" | "failed" | undefined;
        quarantineReason?: string | undefined;
        quarantineDate?: string | undefined;
        releaseDate?: string | undefined;
        totalQuantity?: number | undefined;
        availableQuantity?: number | undefined;
        reservedQuantity?: number | undefined;
        unitCost?: number | undefined;
        serialNumbers?: string[] | undefined;
        customFields?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    quarantineLot(lotId: string, data: {
        reason: string;
        notes?: string;
    }, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotNumber: string;
        status: "active" | "expired" | "consumed" | "quarantined" | "scrapped";
        trackingMode: "none" | "lot_only" | "serial_only" | "lot_and_serial";
        insertedAt: string;
        updatedAt: string;
        manufacturingDate?: string | undefined;
        expirationDate?: string | undefined;
        batchNumber?: string | undefined;
        supplierLotNumber?: string | undefined;
        supplierId?: string | undefined;
        certificateNumbers?: string[] | undefined;
        qualityStatus?: "pending" | "quarantined" | "passed" | "failed" | undefined;
        quarantineReason?: string | undefined;
        quarantineDate?: string | undefined;
        releaseDate?: string | undefined;
        totalQuantity?: number | undefined;
        availableQuantity?: number | undefined;
        reservedQuantity?: number | undefined;
        unitCost?: number | undefined;
        serialNumbers?: string[] | undefined;
        customFields?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    releaseLot(lotId: string, data?: {
        notes?: string;
    }, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotNumber: string;
        status: "active" | "expired" | "consumed" | "quarantined" | "scrapped";
        trackingMode: "none" | "lot_only" | "serial_only" | "lot_and_serial";
        insertedAt: string;
        updatedAt: string;
        manufacturingDate?: string | undefined;
        expirationDate?: string | undefined;
        batchNumber?: string | undefined;
        supplierLotNumber?: string | undefined;
        supplierId?: string | undefined;
        certificateNumbers?: string[] | undefined;
        qualityStatus?: "pending" | "quarantined" | "passed" | "failed" | undefined;
        quarantineReason?: string | undefined;
        quarantineDate?: string | undefined;
        releaseDate?: string | undefined;
        totalQuantity?: number | undefined;
        availableQuantity?: number | undefined;
        reservedQuantity?: number | undefined;
        unitCost?: number | undefined;
        serialNumbers?: string[] | undefined;
        customFields?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    splitLot(lotId: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotNumber: string;
        status: "active" | "expired" | "consumed" | "quarantined" | "scrapped";
        trackingMode: "none" | "lot_only" | "serial_only" | "lot_and_serial";
        insertedAt: string;
        updatedAt: string;
        manufacturingDate?: string | undefined;
        expirationDate?: string | undefined;
        batchNumber?: string | undefined;
        supplierLotNumber?: string | undefined;
        supplierId?: string | undefined;
        certificateNumbers?: string[] | undefined;
        qualityStatus?: "pending" | "quarantined" | "passed" | "failed" | undefined;
        quarantineReason?: string | undefined;
        quarantineDate?: string | undefined;
        releaseDate?: string | undefined;
        totalQuantity?: number | undefined;
        availableQuantity?: number | undefined;
        reservedQuantity?: number | undefined;
        unitCost?: number | undefined;
        serialNumbers?: string[] | undefined;
        customFields?: object | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    mergeLots(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        lotNumber: string;
        status: "active" | "expired" | "consumed" | "quarantined" | "scrapped";
        trackingMode: "none" | "lot_only" | "serial_only" | "lot_and_serial";
        insertedAt: string;
        updatedAt: string;
        manufacturingDate?: string | undefined;
        expirationDate?: string | undefined;
        batchNumber?: string | undefined;
        supplierLotNumber?: string | undefined;
        supplierId?: string | undefined;
        certificateNumbers?: string[] | undefined;
        qualityStatus?: "pending" | "quarantined" | "passed" | "failed" | undefined;
        quarantineReason?: string | undefined;
        quarantineDate?: string | undefined;
        releaseDate?: string | undefined;
        totalQuantity?: number | undefined;
        availableQuantity?: number | undefined;
        reservedQuantity?: number | undefined;
        unitCost?: number | undefined;
        serialNumbers?: string[] | undefined;
        customFields?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getInventoryValuation(filters?: any, config?: RequestConfig): Promise<Response<{
        totalValue: number;
        items: Array<{
            itemId: string;
            itemName: string;
            quantity: number;
            unitCost: number;
            totalValue: number;
        }>;
    }>>;
    getStockLevels(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        itemId: string;
        itemName: string;
        locationId: string;
        locationName: string;
        availableQuantity: number;
        reservedQuantity: number;
        totalQuantity: number;
        unitOfMeasure?: string;
    }>>;
    getLowStockItems(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        itemId: string;
        itemName: string;
        locationId: string;
        locationName: string;
        currentQuantity: number;
        minimumQuantity: number;
        reorderQuantity: number;
        unitOfMeasure?: string;
    }>>;
    getExpiringLots(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        lotId: string;
        lotNumber: string;
        itemId: string;
        itemName: string;
        locationId: string;
        locationName: string;
        quantity: number;
        expirationDate: string;
        daysToExpiry: number;
    }>>;
    getStockTransactions(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        itemId: string;
        locationId: string;
        lotId?: string;
        transactionType: string;
        quantity: number;
        unitCost?: number;
        totalCost?: number;
        reference?: string;
        notes?: string;
        createdAt: string;
    }>>;
    getStockStats(filters?: any, config?: RequestConfig): Promise<Response<{
        totalItems: number;
        totalValue: number;
        lowStockItems: number;
        outOfStockItems: number;
        topMovingItems: any[];
        stockTurnover: number;
    }>>;
    getStockAlerts(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        type: string;
        severity: string;
        itemId: string;
        locationId?: string;
        currentQuantity: number;
        thresholdQuantity?: number;
        message: string;
        createdAt: string;
    }>>;
    performStockCycleCount(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        locationId: string;
        countMethod: string;
        status: "scheduled" | "in_progress" | "completed";
        scheduledDate?: string;
        createdAt: string;
    }>>;
    getPurchaseOrders(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getPurchaseOrder(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    createPurchaseOrder(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    updatePurchaseOrder(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    deletePurchaseOrder(id: string, config?: RequestConfig): Promise<Response<void>>;
    approvePurchaseOrder(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    sendPurchaseOrder(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    acknowledgePurchaseOrder(id: string, notes?: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    cancelPurchaseOrder(id: string, reason?: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    closePurchaseOrder(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        orderNumber: string;
        supplierId: string;
        supplierName: string;
        orderType: "service" | "standard" | "blanket" | "contract" | "emergency";
        status: "closed" | "draft" | "cancelled" | "approved" | "pending_approval" | "sent" | "acknowledged" | "partially_received" | "received";
        priority: "low" | "high" | "normal" | "urgent";
        orderDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        requisitionId?: string | undefined;
        quotationId?: string | undefined;
        contractId?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        promisedDeliveryDate?: string | undefined;
        actualDeliveryDate?: string | undefined;
        requestedBy?: string | undefined;
        authorizedBy?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        buyerId?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        deliveryLocationId?: string | undefined;
        billingLocationId?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        internalNotes?: string | undefined;
        trackingNumber?: string | undefined;
        carrier?: string | undefined;
        sentAt?: string | undefined;
        acknowledgedAt?: string | undefined;
        acknowledgmentNotes?: string | undefined;
        revisionNumber?: number | undefined;
        parentOrderId?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getPurchaseRequisitions(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getPurchaseRequisition(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    createPurchaseRequisition(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    updatePurchaseRequisition(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    deletePurchaseRequisition(id: string, config?: RequestConfig): Promise<Response<void>>;
    submitPurchaseRequisition(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    approvePurchaseRequisition(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    rejectPurchaseRequisition(id: string, reason: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        requisitionNumber: string;
        title: string;
        requisitionType: "material" | "service" | "equipment" | "maintenance" | "office_supplies";
        status: "closed" | "draft" | "cancelled" | "submitted" | "approved" | "rejected" | "pending_approval" | "ordered" | "partially_ordered";
        priority: "low" | "high" | "normal" | "urgent";
        requestedBy: string;
        requestedDate: string;
        totalEstimatedAmount: number;
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        departmentId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        budgetId?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        requiredDate?: string | undefined;
        deliveryLocationId?: string | undefined;
        preferredSupplierId?: string | undefined;
        currency?: string | undefined;
        justification?: string | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getSupplierQuotations(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        quotationNumber: string;
        supplierId: string;
        supplierName: string;
        quotationType: "rfq" | "informal" | "formal" | "tender";
        status: "expired" | "under_review" | "rejected" | "received" | "requested" | "accepted";
        requestDate: string;
        quotationDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        rfqId?: string | undefined;
        responseDate?: string | undefined;
        validUntil?: string | undefined;
        contactPersonId?: string | undefined;
        contactName?: string | undefined;
        contactEmail?: string | undefined;
        contactPhone?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        leadTimeDays?: number | undefined;
        warrantyPeriod?: string | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        attachments?: string[] | undefined;
        evaluationScore?: number | undefined;
        evaluationNotes?: string | undefined;
        selectedAt?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getSupplierQuotation(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        quotationNumber: string;
        supplierId: string;
        supplierName: string;
        quotationType: "rfq" | "informal" | "formal" | "tender";
        status: "expired" | "under_review" | "rejected" | "received" | "requested" | "accepted";
        requestDate: string;
        quotationDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        rfqId?: string | undefined;
        responseDate?: string | undefined;
        validUntil?: string | undefined;
        contactPersonId?: string | undefined;
        contactName?: string | undefined;
        contactEmail?: string | undefined;
        contactPhone?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        leadTimeDays?: number | undefined;
        warrantyPeriod?: string | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        attachments?: string[] | undefined;
        evaluationScore?: number | undefined;
        evaluationNotes?: string | undefined;
        selectedAt?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    createSupplierQuotation(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        quotationNumber: string;
        supplierId: string;
        supplierName: string;
        quotationType: "rfq" | "informal" | "formal" | "tender";
        status: "expired" | "under_review" | "rejected" | "received" | "requested" | "accepted";
        requestDate: string;
        quotationDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        rfqId?: string | undefined;
        responseDate?: string | undefined;
        validUntil?: string | undefined;
        contactPersonId?: string | undefined;
        contactName?: string | undefined;
        contactEmail?: string | undefined;
        contactPhone?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        leadTimeDays?: number | undefined;
        warrantyPeriod?: string | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        attachments?: string[] | undefined;
        evaluationScore?: number | undefined;
        evaluationNotes?: string | undefined;
        selectedAt?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateSupplierQuotation(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        quotationNumber: string;
        supplierId: string;
        supplierName: string;
        quotationType: "rfq" | "informal" | "formal" | "tender";
        status: "expired" | "under_review" | "rejected" | "received" | "requested" | "accepted";
        requestDate: string;
        quotationDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        rfqId?: string | undefined;
        responseDate?: string | undefined;
        validUntil?: string | undefined;
        contactPersonId?: string | undefined;
        contactName?: string | undefined;
        contactEmail?: string | undefined;
        contactPhone?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        leadTimeDays?: number | undefined;
        warrantyPeriod?: string | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        attachments?: string[] | undefined;
        evaluationScore?: number | undefined;
        evaluationNotes?: string | undefined;
        selectedAt?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteSupplierQuotation(id: string, config?: RequestConfig): Promise<Response<void>>;
    selectSupplierQuotation(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        quotationNumber: string;
        supplierId: string;
        supplierName: string;
        quotationType: "rfq" | "informal" | "formal" | "tender";
        status: "expired" | "under_review" | "rejected" | "received" | "requested" | "accepted";
        requestDate: string;
        quotationDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        rfqId?: string | undefined;
        responseDate?: string | undefined;
        validUntil?: string | undefined;
        contactPersonId?: string | undefined;
        contactName?: string | undefined;
        contactEmail?: string | undefined;
        contactPhone?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        leadTimeDays?: number | undefined;
        warrantyPeriod?: string | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        attachments?: string[] | undefined;
        evaluationScore?: number | undefined;
        evaluationNotes?: string | undefined;
        selectedAt?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    rejectSupplierQuotation(id: string, reason: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        quotationNumber: string;
        supplierId: string;
        supplierName: string;
        quotationType: "rfq" | "informal" | "formal" | "tender";
        status: "expired" | "under_review" | "rejected" | "received" | "requested" | "accepted";
        requestDate: string;
        quotationDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        subtotalAmount: number;
        taxAmount: number;
        discountAmount: number;
        shippingAmount: number;
        totalAmount: number;
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        rfqId?: string | undefined;
        responseDate?: string | undefined;
        validUntil?: string | undefined;
        contactPersonId?: string | undefined;
        contactName?: string | undefined;
        contactEmail?: string | undefined;
        contactPhone?: string | undefined;
        customPaymentTerms?: string | undefined;
        currency?: string | undefined;
        exchangeRate?: number | undefined;
        leadTimeDays?: number | undefined;
        warrantyPeriod?: string | undefined;
        notes?: string | undefined;
        terms?: string | undefined;
        attachments?: string[] | undefined;
        evaluationScore?: number | undefined;
        evaluationNotes?: string | undefined;
        selectedAt?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getGoodsReceipts(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getGoodsReceipt(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    createGoodsReceipt(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateGoodsReceipt(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteGoodsReceipt(id: string, config?: RequestConfig): Promise<Response<void>>;
    inspectGoodsReceipt(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    acceptGoodsReceipt(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    rejectGoodsReceipt(id: string, reason: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    postGoodsReceipt(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        receiptNumber: string;
        purchaseOrderId: string;
        supplierId: string;
        supplierName: string;
        receiptType: "return" | "standard" | "sample" | "consignment";
        status: "draft" | "rejected" | "accepted" | "pending_inspection" | "inspected" | "partially_accepted" | "posted";
        receiptDate: string;
        inspectionResult: "pending" | "passed" | "failed" | "conditional_pass";
        insertedAt: string;
        updatedAt: string;
        supplierCode?: string | undefined;
        expectedDate?: string | undefined;
        deliveryDate?: string | undefined;
        locationId?: string | undefined;
        warehouseId?: string | undefined;
        receivedBy?: string | undefined;
        inspectedBy?: string | undefined;
        inspectedAt?: string | undefined;
        qualityNotes?: string | undefined;
        documentNumber?: string | undefined;
        deliveryNote?: string | undefined;
        packingSlipNumber?: string | undefined;
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        vehicleNumber?: string | undefined;
        driverName?: string | undefined;
        notes?: string | undefined;
        attachments?: string[] | undefined;
        postedAt?: string | undefined;
        postedBy?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getRFQs(filters?: any, config?: RequestConfig): Promise<PaginatedResponse<{
        id: string;
        tenantId: string;
        rfqNumber: string;
        title: string;
        rfqType: "rfq" | "informal" | "formal" | "tender";
        status: "draft" | "cancelled" | "sent" | "responses_received" | "evaluated" | "awarded";
        issueDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        categoryId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        buyerId?: string | undefined;
        responseDeadline?: string | undefined;
        validUntil?: string | undefined;
        currency?: string | undefined;
        customPaymentTerms?: string | undefined;
        deliveryLocationId?: string | undefined;
        evaluationCriteria?: string | undefined;
        terms?: string | undefined;
        instructions?: string | undefined;
        attachments?: string[] | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getRFQ(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        rfqNumber: string;
        title: string;
        rfqType: "rfq" | "informal" | "formal" | "tender";
        status: "draft" | "cancelled" | "sent" | "responses_received" | "evaluated" | "awarded";
        issueDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        categoryId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        buyerId?: string | undefined;
        responseDeadline?: string | undefined;
        validUntil?: string | undefined;
        currency?: string | undefined;
        customPaymentTerms?: string | undefined;
        deliveryLocationId?: string | undefined;
        evaluationCriteria?: string | undefined;
        terms?: string | undefined;
        instructions?: string | undefined;
        attachments?: string[] | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    createRFQ(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        rfqNumber: string;
        title: string;
        rfqType: "rfq" | "informal" | "formal" | "tender";
        status: "draft" | "cancelled" | "sent" | "responses_received" | "evaluated" | "awarded";
        issueDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        categoryId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        buyerId?: string | undefined;
        responseDeadline?: string | undefined;
        validUntil?: string | undefined;
        currency?: string | undefined;
        customPaymentTerms?: string | undefined;
        deliveryLocationId?: string | undefined;
        evaluationCriteria?: string | undefined;
        terms?: string | undefined;
        instructions?: string | undefined;
        attachments?: string[] | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateRFQ(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        rfqNumber: string;
        title: string;
        rfqType: "rfq" | "informal" | "formal" | "tender";
        status: "draft" | "cancelled" | "sent" | "responses_received" | "evaluated" | "awarded";
        issueDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        categoryId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        buyerId?: string | undefined;
        responseDeadline?: string | undefined;
        validUntil?: string | undefined;
        currency?: string | undefined;
        customPaymentTerms?: string | undefined;
        deliveryLocationId?: string | undefined;
        evaluationCriteria?: string | undefined;
        terms?: string | undefined;
        instructions?: string | undefined;
        attachments?: string[] | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteRFQ(id: string, config?: RequestConfig): Promise<Response<void>>;
    sendRFQ(id: string, supplierIds?: string[], config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        rfqNumber: string;
        title: string;
        rfqType: "rfq" | "informal" | "formal" | "tender";
        status: "draft" | "cancelled" | "sent" | "responses_received" | "evaluated" | "awarded";
        issueDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        categoryId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        buyerId?: string | undefined;
        responseDeadline?: string | undefined;
        validUntil?: string | undefined;
        currency?: string | undefined;
        customPaymentTerms?: string | undefined;
        deliveryLocationId?: string | undefined;
        evaluationCriteria?: string | undefined;
        terms?: string | undefined;
        instructions?: string | undefined;
        attachments?: string[] | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    cancelRFQ(id: string, reason?: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        rfqNumber: string;
        title: string;
        rfqType: "rfq" | "informal" | "formal" | "tender";
        status: "draft" | "cancelled" | "sent" | "responses_received" | "evaluated" | "awarded";
        issueDate: string;
        paymentTerms: "custom" | "net_30" | "net_60" | "net_90" | "cod" | "prepaid" | "due_on_receipt";
        deliveryTerms: "exw" | "fca" | "cpt" | "cip" | "dap" | "dpu" | "ddp" | "fas" | "fob" | "cfr" | "cif";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        purchaseRequisitionId?: string | undefined;
        categoryId?: string | undefined;
        projectId?: string | undefined;
        costCenterId?: string | undefined;
        buyerId?: string | undefined;
        responseDeadline?: string | undefined;
        validUntil?: string | undefined;
        currency?: string | undefined;
        customPaymentTerms?: string | undefined;
        deliveryLocationId?: string | undefined;
        evaluationCriteria?: string | undefined;
        terms?: string | undefined;
        instructions?: string | undefined;
        attachments?: string[] | undefined;
        notes?: string | undefined;
        metadata?: object | undefined;
        deletedAt?: string | undefined;
    }>>;
    getSalesOrders(filters?: any, config?: RequestConfig): Promise<Response<{
        data: import("@prodobit/types").SalesOrder[];
        pagination: any;
    }>>;
    getSalesOrder(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        customerId: string;
        orderDate: string;
        status: "closed" | "draft" | "confirmed" | "in_progress" | "shipped" | "delivered" | "cancelled";
        insertedAt: string;
        updatedAt: string;
        requestedDeliveryDate?: string | undefined;
        confirmedDeliveryDate?: string | undefined;
        shippingAddressId?: string | undefined;
        shippingInstructions?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    createSalesOrder(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        customerId: string;
        orderDate: string;
        status: "closed" | "draft" | "confirmed" | "in_progress" | "shipped" | "delivered" | "cancelled";
        insertedAt: string;
        updatedAt: string;
        requestedDeliveryDate?: string | undefined;
        confirmedDeliveryDate?: string | undefined;
        shippingAddressId?: string | undefined;
        shippingInstructions?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateSalesOrder(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        customerId: string;
        orderDate: string;
        status: "closed" | "draft" | "confirmed" | "in_progress" | "shipped" | "delivered" | "cancelled";
        insertedAt: string;
        updatedAt: string;
        requestedDeliveryDate?: string | undefined;
        confirmedDeliveryDate?: string | undefined;
        shippingAddressId?: string | undefined;
        shippingInstructions?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteSalesOrder(id: string, config?: RequestConfig): Promise<Response<void>>;
    updateSalesOrderStatus(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        customerId: string;
        orderDate: string;
        status: "closed" | "draft" | "confirmed" | "in_progress" | "shipped" | "delivered" | "cancelled";
        insertedAt: string;
        updatedAt: string;
        requestedDeliveryDate?: string | undefined;
        confirmedDeliveryDate?: string | undefined;
        shippingAddressId?: string | undefined;
        shippingInstructions?: string | undefined;
        notes?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    addSalesOrderItem(salesOrderId: string, data: any, config?: RequestConfig): Promise<Response<{
        itemId: string;
        quantity: number;
        unitPrice: number;
        unit?: string | undefined;
        requestedDeliveryDate?: string | undefined;
        itemNotes?: string | undefined;
    }>>;
    updateSalesOrderItem(salesOrderId: string, itemId: string, data: any, config?: RequestConfig): Promise<Response<{
        itemId: string;
        quantity: number;
        unitPrice: number;
        unit?: string | undefined;
        requestedDeliveryDate?: string | undefined;
        itemNotes?: string | undefined;
    }>>;
    removeSalesOrderItem(salesOrderId: string, itemId: string, config?: RequestConfig): Promise<Response<void>>;
    getBoms(filters?: BomQuery, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        bomCode: string;
        name: string;
        status: "active" | "draft" | "obsolete" | "under_review";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        version?: string | undefined;
        productionQuantity?: number | undefined;
        productionUnit?: string | undefined;
        validFrom?: string | undefined;
        validTo?: string | undefined;
        isPhantomBom?: boolean | undefined;
        phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
        manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
        planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
        isCurrentVersion?: boolean | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getBomById(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        bomCode: string;
        name: string;
        status: "active" | "draft" | "obsolete" | "under_review";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        version?: string | undefined;
        productionQuantity?: number | undefined;
        productionUnit?: string | undefined;
        validFrom?: string | undefined;
        validTo?: string | undefined;
        isPhantomBom?: boolean | undefined;
        phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
        manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
        planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
        isCurrentVersion?: boolean | undefined;
        deletedAt?: string | undefined;
    }>>;
    createBom(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        bomCode: string;
        name: string;
        status: "active" | "draft" | "obsolete" | "under_review";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        version?: string | undefined;
        productionQuantity?: number | undefined;
        productionUnit?: string | undefined;
        validFrom?: string | undefined;
        validTo?: string | undefined;
        isPhantomBom?: boolean | undefined;
        phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
        manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
        planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
        isCurrentVersion?: boolean | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateBom(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        bomCode: string;
        name: string;
        status: "active" | "draft" | "obsolete" | "under_review";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        version?: string | undefined;
        productionQuantity?: number | undefined;
        productionUnit?: string | undefined;
        validFrom?: string | undefined;
        validTo?: string | undefined;
        isPhantomBom?: boolean | undefined;
        phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
        manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
        planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
        isCurrentVersion?: boolean | undefined;
        deletedAt?: string | undefined;
    }>>;
    deleteBom(id: string, config?: RequestConfig): Promise<Response<void>>;
    getBomExplosion(id: string, explodePhantoms?: boolean, config?: RequestConfig): Promise<Response<any[]>>;
    cloneBom(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        bomCode: string;
        name: string;
        status: "active" | "draft" | "obsolete" | "under_review";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        version?: string | undefined;
        productionQuantity?: number | undefined;
        productionUnit?: string | undefined;
        validFrom?: string | undefined;
        validTo?: string | undefined;
        isPhantomBom?: boolean | undefined;
        phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
        manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
        planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
        isCurrentVersion?: boolean | undefined;
        deletedAt?: string | undefined;
    }>>;
    getBomComponents(filters?: BomComponentQuery, config?: RequestConfig): Promise<Response<any[]>>;
    createBomComponent(data: any, config?: RequestConfig): Promise<Response<any>>;
    updateBomComponent(id: string, data: any, config?: RequestConfig): Promise<Response<any>>;
    deleteBomComponent(id: string, config?: RequestConfig): Promise<Response<void>>;
    getEcos(filters?: EcoQuery, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        ecoNumber: string;
        title: string;
        description: string;
        changeType: "material" | "design" | "process" | "tooling";
        status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
        reasonForChange: string;
        requestedBy: string;
        insertedAt: string;
        updatedAt: string;
        priority?: "low" | "medium" | "high" | "critical" | undefined;
        affectedBomIds?: string[] | undefined;
        impactAnalysis?: string | undefined;
        estimatedCostImpact?: number | undefined;
        costCurrency?: string | undefined;
        requestedCompletionDate?: string | undefined;
        assignedTo?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        deletedAt?: string | undefined;
    }[]>>;
    getEcoById(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        ecoNumber: string;
        title: string;
        description: string;
        changeType: "material" | "design" | "process" | "tooling";
        status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
        reasonForChange: string;
        requestedBy: string;
        insertedAt: string;
        updatedAt: string;
        priority?: "low" | "medium" | "high" | "critical" | undefined;
        affectedBomIds?: string[] | undefined;
        impactAnalysis?: string | undefined;
        estimatedCostImpact?: number | undefined;
        costCurrency?: string | undefined;
        requestedCompletionDate?: string | undefined;
        assignedTo?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    createEco(data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        ecoNumber: string;
        title: string;
        description: string;
        changeType: "material" | "design" | "process" | "tooling";
        status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
        reasonForChange: string;
        requestedBy: string;
        insertedAt: string;
        updatedAt: string;
        priority?: "low" | "medium" | "high" | "critical" | undefined;
        affectedBomIds?: string[] | undefined;
        impactAnalysis?: string | undefined;
        estimatedCostImpact?: number | undefined;
        costCurrency?: string | undefined;
        requestedCompletionDate?: string | undefined;
        assignedTo?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    updateEco(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        ecoNumber: string;
        title: string;
        description: string;
        changeType: "material" | "design" | "process" | "tooling";
        status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
        reasonForChange: string;
        requestedBy: string;
        insertedAt: string;
        updatedAt: string;
        priority?: "low" | "medium" | "high" | "critical" | undefined;
        affectedBomIds?: string[] | undefined;
        impactAnalysis?: string | undefined;
        estimatedCostImpact?: number | undefined;
        costCurrency?: string | undefined;
        requestedCompletionDate?: string | undefined;
        assignedTo?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    approveEco(id: string, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        ecoNumber: string;
        title: string;
        description: string;
        changeType: "material" | "design" | "process" | "tooling";
        status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
        reasonForChange: string;
        requestedBy: string;
        insertedAt: string;
        updatedAt: string;
        priority?: "low" | "medium" | "high" | "critical" | undefined;
        affectedBomIds?: string[] | undefined;
        impactAnalysis?: string | undefined;
        estimatedCostImpact?: number | undefined;
        costCurrency?: string | undefined;
        requestedCompletionDate?: string | undefined;
        assignedTo?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    rejectEco(id: string, data: any, config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        ecoNumber: string;
        title: string;
        description: string;
        changeType: "material" | "design" | "process" | "tooling";
        status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
        reasonForChange: string;
        requestedBy: string;
        insertedAt: string;
        updatedAt: string;
        priority?: "low" | "medium" | "high" | "critical" | undefined;
        affectedBomIds?: string[] | undefined;
        impactAnalysis?: string | undefined;
        estimatedCostImpact?: number | undefined;
        costCurrency?: string | undefined;
        requestedCompletionDate?: string | undefined;
        assignedTo?: string | undefined;
        approvedBy?: string | undefined;
        approvedAt?: string | undefined;
        rejectedBy?: string | undefined;
        rejectedAt?: string | undefined;
        rejectionReason?: string | undefined;
        deletedAt?: string | undefined;
    }>>;
    getMrpRequirements(bomId: string, requiredQuantity: number, requiredDate: string, sourcingFilter?: string, config?: RequestConfig): Promise<Response<any[]>>;
    getBomLeadTime(bomId: string, config?: RequestConfig): Promise<Response<{
        leadTime: number;
        criticalPath: any[];
    }>>;
    getBomStats(config?: RequestConfig): Promise<Response<{
        totalBoms: number;
        activeBoms: number;
        draftBoms: number;
        mostUsedComponents: any[];
        costAnalysis: any;
    }>>;
    createBomQuick(itemId: string, bomCode: string, name: string, components: any[], config?: RequestConfig): Promise<Response<{
        id: string;
        tenantId: string;
        itemId: string;
        bomCode: string;
        name: string;
        status: "active" | "draft" | "obsolete" | "under_review";
        insertedAt: string;
        updatedAt: string;
        description?: string | undefined;
        version?: string | undefined;
        productionQuantity?: number | undefined;
        productionUnit?: string | undefined;
        validFrom?: string | undefined;
        validTo?: string | undefined;
        isPhantomBom?: boolean | undefined;
        phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
        manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
        planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
        isCurrentVersion?: boolean | undefined;
        deletedAt?: string | undefined;
    }>>;
}
export { buildQuery } from "./utils/query-builder";
//# sourceMappingURL=client.d.ts.map