export declare const stockReservationStatusEnum: import("arktype/internal/methods/string.ts").StringType<"expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed", {}>;
export declare const stockReservationTypeEnum: import("arktype/internal/methods/string.ts").StringType<"sales_order" | "work_order" | "transfer" | "manual" | "system", {}>;
export declare const stockMovementTypeEnum: import("arktype/internal/methods/string.ts").StringType<"receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count", {}>;
export declare const stockMovementReasonEnum: import("arktype/internal/methods/string.ts").StringType<"transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft", {}>;
export declare const physicalInventoryStatusEnum: import("arktype/internal/methods/string.ts").StringType<"in_progress" | "cancelled" | "planned" | "completed", {}>;
export declare const physicalInventoryTypeEnum: import("arktype/internal/methods/string.ts").StringType<"cycle_count" | "full_count" | "spot_count" | "location_count", {}>;
export declare const lotStatusEnum: import("arktype/internal/methods/string.ts").StringType<"active" | "expired" | "consumed" | "quarantined" | "scrapped", {}>;
export declare const lotTrackingModeEnum: import("arktype/internal/methods/string.ts").StringType<"none" | "lot_only" | "serial_only" | "lot_and_serial", {}>;
export declare const stockReservation: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    itemId: string;
    lotId: string;
    locationId: string;
    stockId: string;
    reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
    status: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed";
    quantityRequested: number;
    quantityReserved: number;
    quantityConsumed: number;
    insertedAt: string;
    updatedAt: string;
    referenceId?: string | undefined;
    referenceType?: string | undefined;
    priority?: number | undefined;
    expiresAt?: string | undefined;
    reservedBy?: string | undefined;
    notes?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createStockReservationRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId: string;
    locationId: string;
    reservationType: "sales_order" | "work_order" | "transfer" | "manual" | "system";
    quantityRequested: number;
    lotId?: string | undefined;
    referenceId?: string | undefined;
    referenceType?: string | undefined;
    priority?: number | undefined;
    expiresAt?: string | undefined;
    notes?: string | undefined;
}, {}>;
export declare const updateStockReservationRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    status?: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed" | undefined;
    quantityRequested?: number | undefined;
    priority?: number | undefined;
    expiresAt?: string | undefined;
    notes?: string | undefined;
}, {}>;
export declare const stockMovement: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    itemId: string;
    locationId: string;
    movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
    reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
    quantity: number;
    insertedAt: string;
    updatedAt: string;
    lotId?: string | undefined;
    stockId?: string | undefined;
    unitCost?: number | undefined;
    totalCost?: number | undefined;
    referenceId?: string | undefined;
    referenceType?: string | undefined;
    batchNumber?: string | undefined;
    expirationDate?: string | undefined;
    serialNumbers?: string[] | undefined;
    fromLocationId?: string | undefined;
    toLocationId?: string | undefined;
    fromLotId?: string | undefined;
    toLotId?: string | undefined;
    userId?: string | undefined;
    notes?: string | undefined;
    metadata?: object | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createStockMovementRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId: string;
    locationId: string;
    movementType: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count";
    reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
    quantity: number;
    lotId?: string | undefined;
    unitCost?: number | undefined;
    referenceId?: string | undefined;
    referenceType?: string | undefined;
    batchNumber?: string | undefined;
    expirationDate?: string | undefined;
    serialNumbers?: string[] | undefined;
    fromLocationId?: string | undefined;
    toLocationId?: string | undefined;
    fromLotId?: string | undefined;
    toLotId?: string | undefined;
    notes?: string | undefined;
    metadata?: object | undefined;
}, {}>;
export declare const physicalInventory: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    name: string;
    inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
    status: "in_progress" | "cancelled" | "planned" | "completed";
    insertedAt: string;
    updatedAt: string;
    description?: string | undefined;
    locationIds?: string[] | undefined;
    itemIds?: string[] | undefined;
    categoryIds?: string[] | undefined;
    plannedStartDate?: string | undefined;
    plannedEndDate?: string | undefined;
    actualStartDate?: string | undefined;
    actualEndDate?: string | undefined;
    countedBy?: string | undefined;
    approvedBy?: string | undefined;
    approvedAt?: string | undefined;
    tolerancePercentage?: number | undefined;
    notes?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const physicalInventoryItem: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    physicalInventoryId: string;
    itemId: string;
    locationId: string;
    systemQuantity: number;
    insertedAt: string;
    updatedAt: string;
    lotId?: string | undefined;
    countedQuantity?: number | undefined;
    varianceQuantity?: number | undefined;
    variancePercentage?: number | undefined;
    unitCost?: number | undefined;
    varianceValue?: number | undefined;
    counted?: boolean | undefined;
    countedAt?: string | undefined;
    countedBy?: string | undefined;
    serialNumbers?: string[] | undefined;
    notes?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createPhysicalInventoryRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    name: string;
    inventoryType: "cycle_count" | "full_count" | "spot_count" | "location_count";
    description?: string | undefined;
    locationIds?: string[] | undefined;
    itemIds?: string[] | undefined;
    categoryIds?: string[] | undefined;
    plannedStartDate?: string | undefined;
    plannedEndDate?: string | undefined;
    tolerancePercentage?: number | undefined;
    notes?: string | undefined;
}, {}>;
export declare const updatePhysicalInventoryRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    name?: string | undefined;
    description?: string | undefined;
    status?: "in_progress" | "cancelled" | "planned" | "completed" | undefined;
    plannedStartDate?: string | undefined;
    plannedEndDate?: string | undefined;
    actualStartDate?: string | undefined;
    actualEndDate?: string | undefined;
    tolerancePercentage?: number | undefined;
    notes?: string | undefined;
}, {}>;
export declare const updatePhysicalInventoryItemRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    countedQuantity?: number | undefined;
    serialNumbers?: string[] | undefined;
    notes?: string | undefined;
}, {}>;
export declare const stockAdjustment: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    status: "draft" | "cancelled" | "approved";
    insertedAt: string;
    updatedAt: string;
    batchNumber?: string | undefined;
    reason?: string | undefined;
    adjustedBy?: string | undefined;
    approvedBy?: string | undefined;
    approvedAt?: string | undefined;
    notes?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const stockAdjustmentItem: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    stockAdjustmentId: string;
    itemId: string;
    locationId: string;
    currentQuantity: number;
    adjustedQuantity: number;
    varianceQuantity: number;
    reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
    insertedAt: string;
    updatedAt: string;
    lotId?: string | undefined;
    stockId?: string | undefined;
    unitCost?: number | undefined;
    totalCost?: number | undefined;
    notes?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createStockAdjustmentRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    items: {
        itemId: string;
        locationId: string;
        adjustedQuantity: number;
        reason: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft";
        lotId?: string | undefined;
        unitCost?: number | undefined;
        notes?: string | undefined;
    }[];
    batchNumber?: string | undefined;
    reason?: string | undefined;
    notes?: string | undefined;
}, {}>;
export declare const updateStockAdjustmentRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    reason?: string | undefined;
    status?: "draft" | "cancelled" | "approved" | undefined;
    notes?: string | undefined;
}, {}>;
export declare const lotGenealogy: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    childLotId: string;
    parentLotId: string;
    relationship: "split" | "merge" | "transform" | "rework";
    quantity: number;
    insertedAt: string;
    updatedAt: string;
    unitOfMeasure?: string | undefined;
    workOrderId?: string | undefined;
    processedAt?: string | undefined;
    processedBy?: string | undefined;
    notes?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createLotGenealogyRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    childLotId: string;
    parentLotId: string;
    relationship: "split" | "merge" | "transform" | "rework";
    quantity: number;
    unitOfMeasure?: string | undefined;
    workOrderId?: string | undefined;
    notes?: string | undefined;
}, {}>;
export declare const lotTracking: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    itemId: string;
    lotNumber: string;
    status: "active" | "expired" | "consumed" | "quarantined" | "scrapped";
    trackingMode: "none" | "lot_only" | "serial_only" | "lot_and_serial";
    insertedAt: string;
    updatedAt: string;
    manufacturingDate?: string | undefined;
    expirationDate?: string | undefined;
    batchNumber?: string | undefined;
    supplierLotNumber?: string | undefined;
    supplierId?: string | undefined;
    certificateNumbers?: string[] | undefined;
    qualityStatus?: "pending" | "quarantined" | "passed" | "failed" | undefined;
    quarantineReason?: string | undefined;
    quarantineDate?: string | undefined;
    releaseDate?: string | undefined;
    totalQuantity?: number | undefined;
    availableQuantity?: number | undefined;
    reservedQuantity?: number | undefined;
    unitCost?: number | undefined;
    serialNumbers?: string[] | undefined;
    customFields?: object | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const stockReservationFilters: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId?: string | undefined;
    locationId?: string | undefined;
    status?: "expired" | "confirmed" | "cancelled" | "pending" | "partially_consumed" | "consumed" | undefined;
    reservationType?: "sales_order" | "work_order" | "transfer" | "manual" | "system" | undefined;
    referenceId?: string | undefined;
    expiresFrom?: string | undefined;
    expiresTo?: string | undefined;
    search?: string | undefined;
    page?: number | undefined;
    limit?: number | undefined;
    orderBy?: string | undefined;
    orderDirection?: "asc" | "desc" | undefined;
}, {}>;
export declare const stockMovementFilters: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId?: string | undefined;
    locationId?: string | undefined;
    lotId?: string | undefined;
    movementType?: "receipt" | "issue" | "transfer_in" | "transfer_out" | "adjustment_in" | "adjustment_out" | "production_in" | "production_out" | "return" | "reservation" | "unreservation" | "cycle_count" | undefined;
    reason?: "transfer" | "manual" | "adjustment" | "production" | "return" | "cycle_count" | "purchase_receipt" | "sales_issue" | "damage" | "obsolescence" | "theft" | undefined;
    dateFrom?: string | undefined;
    dateTo?: string | undefined;
    referenceId?: string | undefined;
    search?: string | undefined;
    page?: number | undefined;
    limit?: number | undefined;
    orderBy?: string | undefined;
    orderDirection?: "asc" | "desc" | undefined;
}, {}>;
export declare const physicalInventoryFilters: import("arktype/internal/methods/object.ts").ObjectType<{
    status?: "in_progress" | "cancelled" | "planned" | "completed" | undefined;
    inventoryType?: "cycle_count" | "full_count" | "spot_count" | "location_count" | undefined;
    locationIds?: string[] | undefined;
    dateFrom?: string | undefined;
    dateTo?: string | undefined;
    search?: string | undefined;
    page?: number | undefined;
    limit?: number | undefined;
    orderBy?: string | undefined;
    orderDirection?: "asc" | "desc" | undefined;
}, {}>;
export declare const stockAdjustmentFilters: import("arktype/internal/methods/object.ts").ObjectType<{
    status?: "draft" | "cancelled" | "approved" | undefined;
    dateFrom?: string | undefined;
    dateTo?: string | undefined;
    adjustedBy?: string | undefined;
    search?: string | undefined;
    page?: number | undefined;
    limit?: number | undefined;
    orderBy?: string | undefined;
    orderDirection?: "asc" | "desc" | undefined;
}, {}>;
export type StockReservation = typeof stockReservation.infer;
export type CreateStockReservationRequest = typeof createStockReservationRequest.infer;
export type UpdateStockReservationRequest = typeof updateStockReservationRequest.infer;
export type StockMovement = typeof stockMovement.infer;
export type CreateStockMovementRequest = typeof createStockMovementRequest.infer;
export type PhysicalInventory = typeof physicalInventory.infer;
export type PhysicalInventoryItem = typeof physicalInventoryItem.infer;
export type CreatePhysicalInventoryRequest = typeof createPhysicalInventoryRequest.infer;
export type UpdatePhysicalInventoryRequest = typeof updatePhysicalInventoryRequest.infer;
export type UpdatePhysicalInventoryItemRequest = typeof updatePhysicalInventoryItemRequest.infer;
export type StockAdjustment = typeof stockAdjustment.infer;
export type StockAdjustmentItem = typeof stockAdjustmentItem.infer;
export type CreateStockAdjustmentRequest = typeof createStockAdjustmentRequest.infer;
export type UpdateStockAdjustmentRequest = typeof updateStockAdjustmentRequest.infer;
export type LotGenealogy = typeof lotGenealogy.infer;
export type CreateLotGenealogyRequest = typeof createLotGenealogyRequest.infer;
export type LotTracking = typeof lotTracking.infer;
export type StockReservationFilters = typeof stockReservationFilters.infer;
export type StockMovementFilters = typeof stockMovementFilters.infer;
export type PhysicalInventoryFilters = typeof physicalInventoryFilters.infer;
export type StockAdjustmentFilters = typeof stockAdjustmentFilters.infer;
export type StockReservationStatus = typeof stockReservationStatusEnum.infer;
export type StockReservationType = typeof stockReservationTypeEnum.infer;
export type StockMovementType = typeof stockMovementTypeEnum.infer;
export type StockMovementReason = typeof stockMovementReasonEnum.infer;
export type PhysicalInventoryStatus = typeof physicalInventoryStatusEnum.infer;
export type PhysicalInventoryType = typeof physicalInventoryTypeEnum.infer;
export type LotStatus = typeof lotStatusEnum.infer;
export type LotTrackingMode = typeof lotTrackingModeEnum.infer;
//# sourceMappingURL=inventory.d.ts.map