export declare const bomStatus: import("arktype/internal/methods/string.ts").StringType<"active" | "draft" | "obsolete" | "under_review", {}>;
export declare const phantomExplosionPolicy: import("arktype/internal/methods/string.ts").StringType<"immediate" | "one_level" | "full_explosion", {}>;
export declare const manufacturingPolicy: import("arktype/internal/methods/string.ts").StringType<"assemble_to_stock" | "assemble_to_order" | "phantom", {}>;
export declare const planningPolicy: import("arktype/internal/methods/string.ts").StringType<"phantom" | "mrp" | "reorder_point", {}>;
export declare const componentType: import("arktype/internal/methods/string.ts").StringType<"phantom" | "material" | "assembly", {}>;
export declare const phantomPolicy: import("arktype/internal/methods/string.ts").StringType<"always_explode" | "conditional_explode" | "planning_only", {}>;
export declare const sourcingType: import("arktype/internal/methods/string.ts").StringType<"phantom" | "make" | "buy" | "configured", {}>;
export declare const bom: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    itemId: string;
    bomCode: string;
    name: string;
    status: "active" | "draft" | "obsolete" | "under_review";
    insertedAt: string;
    updatedAt: string;
    description?: string | undefined;
    version?: string | undefined;
    productionQuantity?: number | undefined;
    productionUnit?: string | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
    isPhantomBom?: boolean | undefined;
    phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
    manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
    planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
    isCurrentVersion?: boolean | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createBomRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId: string;
    bomCode: string;
    name: string;
    description?: string | undefined;
    status?: "active" | "draft" | "obsolete" | "under_review" | undefined;
    version?: string | undefined;
    productionQuantity?: number | undefined;
    productionUnit?: string | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
    isPhantomBom?: boolean | undefined;
    phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
    manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
    planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
}, {}>;
export declare const updateBomRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId?: string | undefined;
    bomCode?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    status?: "active" | "draft" | "obsolete" | "under_review" | undefined;
    version?: string | undefined;
    productionQuantity?: number | undefined;
    productionUnit?: string | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
    isPhantomBom?: boolean | undefined;
    phantomExplosionPolicy?: "immediate" | "one_level" | "full_explosion" | undefined;
    manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
    planningPolicy?: "phantom" | "mrp" | "reorder_point" | undefined;
}, {}>;
export declare const bomComponent: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    bomId: string;
    componentItemId: string;
    quantity: number;
    unit: string;
    insertedAt: string;
    updatedAt: string;
    parentComponentId?: string | undefined;
    componentType?: "phantom" | "material" | "assembly" | undefined;
    isOptional?: boolean | undefined;
    isCritical?: boolean | undefined;
    phantomPolicy?: "always_explode" | "conditional_explode" | "planning_only" | undefined;
    sourcingType?: "phantom" | "make" | "buy" | "configured" | undefined;
    explodeInMrp?: boolean | undefined;
    explodeInCosting?: boolean | undefined;
    explodeInPicking?: boolean | undefined;
    setupTimeMinutes?: number | undefined;
    runTimePerUnitSeconds?: number | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createBomComponentRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    bomId: string;
    componentItemId: string;
    quantity: number;
    unit: string;
    parentComponentId?: string | undefined;
    componentType?: "phantom" | "material" | "assembly" | undefined;
    isOptional?: boolean | undefined;
    isCritical?: boolean | undefined;
    phantomPolicy?: "always_explode" | "conditional_explode" | "planning_only" | undefined;
    sourcingType?: "phantom" | "make" | "buy" | "configured" | undefined;
    explodeInMrp?: boolean | undefined;
    explodeInCosting?: boolean | undefined;
    explodeInPicking?: boolean | undefined;
    setupTimeMinutes?: number | undefined;
    runTimePerUnitSeconds?: number | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
}, {}>;
export declare const ecoChangeType: import("arktype/internal/methods/string.ts").StringType<"material" | "design" | "process" | "tooling", {}>;
export declare const ecoPriority: import("arktype/internal/methods/string.ts").StringType<"low" | "medium" | "high" | "critical", {}>;
export declare const ecoStatus: import("arktype/internal/methods/string.ts").StringType<"draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented", {}>;
export declare const eco: import("arktype/internal/methods/object.ts").ObjectType<{
    id: string;
    tenantId: string;
    ecoNumber: string;
    title: string;
    description: string;
    changeType: "material" | "design" | "process" | "tooling";
    status: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented";
    reasonForChange: string;
    requestedBy: string;
    insertedAt: string;
    updatedAt: string;
    priority?: "low" | "medium" | "high" | "critical" | undefined;
    affectedBomIds?: string[] | undefined;
    impactAnalysis?: string | undefined;
    estimatedCostImpact?: number | undefined;
    costCurrency?: string | undefined;
    requestedCompletionDate?: string | undefined;
    assignedTo?: string | undefined;
    approvedBy?: string | undefined;
    approvedAt?: string | undefined;
    rejectedBy?: string | undefined;
    rejectedAt?: string | undefined;
    rejectionReason?: string | undefined;
    deletedAt?: string | undefined;
}, {}>;
export declare const createEcoRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    ecoNumber: string;
    title: string;
    description: string;
    changeType: "material" | "design" | "process" | "tooling";
    reasonForChange: string;
    requestedBy: string;
    priority?: "low" | "medium" | "high" | "critical" | undefined;
    affectedBomIds?: string[] | undefined;
    impactAnalysis?: string | undefined;
    estimatedCostImpact?: number | undefined;
    costCurrency?: string | undefined;
    requestedCompletionDate?: string | undefined;
    assignedTo?: string | undefined;
}, {}>;
export declare const updateEcoRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    ecoNumber?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    changeType?: "material" | "design" | "process" | "tooling" | undefined;
    priority?: "low" | "medium" | "high" | "critical" | undefined;
    affectedBomIds?: string[] | undefined;
    reasonForChange?: string | undefined;
    impactAnalysis?: string | undefined;
    estimatedCostImpact?: number | undefined;
    costCurrency?: string | undefined;
    requestedCompletionDate?: string | undefined;
    assignedTo?: string | undefined;
}, {}>;
export declare const rejectEcoRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    reason: string;
}, {}>;
export declare const cloneBomRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    newVersion: string;
}, {}>;
export declare const mrpRequirementsRequest: import("arktype/internal/methods/object.ts").ObjectType<{
    requiredQuantity: number;
    requiredDate: string;
    sourcingFilter?: string | undefined;
}, {}>;
export declare const bomQuery: import("arktype/internal/methods/object.ts").ObjectType<{
    itemId?: string | undefined;
    status?: "active" | "draft" | "obsolete" | "under_review" | undefined;
    isCurrentVersion?: boolean | undefined;
    isPhantomBom?: boolean | undefined;
    manufacturingPolicy?: "assemble_to_stock" | "assemble_to_order" | "phantom" | undefined;
    search?: string | undefined;
}, {}>;
export declare const bomComponentQuery: import("arktype/internal/methods/object.ts").ObjectType<{
    bomId?: string | undefined;
    componentItemId?: string | undefined;
    componentType?: "phantom" | "material" | "assembly" | undefined;
    sourcingType?: "phantom" | "make" | "buy" | "configured" | undefined;
    isOptional?: boolean | undefined;
    isCritical?: boolean | undefined;
}, {}>;
export declare const ecoQuery: import("arktype/internal/methods/object.ts").ObjectType<{
    status?: "draft" | "cancelled" | "under_review" | "submitted" | "approved" | "rejected" | "implemented" | undefined;
    changeType?: "material" | "design" | "process" | "tooling" | undefined;
    priority?: "low" | "medium" | "high" | "critical" | undefined;
    assignedTo?: string | undefined;
    requestedBy?: string | undefined;
}, {}>;
export type BomStatus = typeof bomStatus.infer;
export type PhantomExplosionPolicy = typeof phantomExplosionPolicy.infer;
export type ManufacturingPolicy = typeof manufacturingPolicy.infer;
export type PlanningPolicy = typeof planningPolicy.infer;
export type ComponentType = typeof componentType.infer;
export type PhantomPolicy = typeof phantomPolicy.infer;
export type SourcingType = typeof sourcingType.infer;
export type Bom = typeof bom.infer;
export type CreateBomRequest = typeof createBomRequest.infer;
export type UpdateBomRequest = typeof updateBomRequest.infer;
export type BomComponent = typeof bomComponent.infer;
export type CreateBomComponentRequest = typeof createBomComponentRequest.infer;
export type EcoChangeType = typeof ecoChangeType.infer;
export type EcoPriority = typeof ecoPriority.infer;
export type EcoStatus = typeof ecoStatus.infer;
export type Eco = typeof eco.infer;
export type CreateEcoRequest = typeof createEcoRequest.infer;
export type UpdateEcoRequest = typeof updateEcoRequest.infer;
export type RejectEcoRequest = typeof rejectEcoRequest.infer;
export type CloneBomRequest = typeof cloneBomRequest.infer;
export type MrpRequirementsRequest = typeof mrpRequirementsRequest.infer;
export type BomQuery = typeof bomQuery.infer;
export type BomComponentQuery = typeof bomComponentQuery.infer;
export type EcoQuery = typeof ecoQuery.infer;
//# sourceMappingURL=manufacturing.d.ts.map